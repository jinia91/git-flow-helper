name: main 브랜치 오토 태그 생성기

on:
  pull_request:
    types: [closed]

jobs:
  auto-tag:
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Tagging
        uses: actions/github-script@v5
        with:
          script: |
            const headBranch = context.payload.pull_request.head.ref;
            const baseBranch = context.payload.pull_request.base.ref;

            // 브랜치 이름에 따라 버전 타입 결정
            let versionType;
            if (headBranch.startsWith('release/')) {
              versionType = 'major';
            } else if (headBranch.startsWith('hotfix/')) {
              versionType = 'minor';
            }

            const tags = await github.rest.repos.listTags({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            
            let latestTag = tags.data.length > 0 ? tags.data[0].name : 'v0.0.0';
            const versionMatch = latestTag.match(/v(\d+)\.(\d+)\.(\d+)/);
            let major = parseInt(versionMatch[1], 10);
            let minor = parseInt(versionMatch[2], 10);

            let date = new Date();
            let year = date.getFullYear();
            let month = date.getMonth() + 1;
            let day = date.getDate();
            let patch = parseInt(`${year}${month}${day}`, 10);

            if (versionType === 'major') {
              major += 1; minor = 0; 
            } else if (versionType === 'minor') {
              minor += 1;
            }

            const newTag = `v${major}.${minor}.${patch}`;
            console.log(`릴리즈될 버전은 : ${newTag} 입니다`);

            // 태그 마킹
            await github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/tags/${newTag}`,
              sha: context.payload.pull_request.merge_commit_sha
            });

